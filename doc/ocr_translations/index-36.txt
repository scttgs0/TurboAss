ORIGINAL
======== 


verarbeiten kann, sollten Sie dies vermeiden! Symbole dürfen also nie mit
einem Punkt beginnen.

Optimierungen

Der OMIKRON.Assembler beherrscht „halb-“automatische Optimierungen.
Wenn bei der Assemblierung Optimierungsmöglichkeiten erkannt werden,
werden diese mit entsprechenden Warnmeldungen versehen (siehe Kapi-
tel 5.7.1 auf Seite 100). Über dem „ABBRUCH“-Button erscheint ein But-
ton „ANPASSEN“ . Wenn Sie darauf klicken, wird der Dialog beendet und
alle Zeilen mit entsprechenden Warnmeldungen angepaßt. Dann müssen Sie
nochmal neu Assemblieren. Eventuell müssen Sie diese Prozedur noch ein-
mal wiederholen: Ein JMP kann in einem Durchgang zu einem BRA optimiert,
in einem zweiten kann dieser zu einem BRA.S geändert werden (wenn der
Sprung dadurch nicht zu weit wird, natürlich).

Dieses Verfahren mag jemandem im Vergleich zu anderen Assemblern etwas
umständlich vorkommen, weil diese bei der Assemblierung gleich mit opti-
mieren können. Durch unser Konzept ist dieses jedoch nicht möglich. Der
Assembler wird durch die Optimierungsabfragen aber praktisch nicht lang-
samer, und das Doppelt-Assemblieren beim OMIKRON. Assembler geht wohl
immer noch wesentlich schneller als das Binmal-Assemblieren bei einem an-
deren.

5.5.2 Formelrechnungen

Der OMIKRON.Assembler erlaubt, mit 16 verschiedenen Rechenoperationen
zu arbeiten. Dabei handelt es sich um die Grundrechenarten, die booleschen
Algebra sowie Vergleiche. Alle Operationen werden mit 32 Bit Genauigkeit
ausgeführt. Er beherrscht natürlich Punkt-vor-Strich-Rechnung.

Fangen wir mit den Vorzeichen an:

    +  |  Plus (wer hätte es gedacht)
    -  |  Minus (auch nicht schlecht) (2er Komplement)
    ~  |  NOT (1er Komplement)
    !  |  logisches NOT (Ergebnis ist 0 oder —1)

 

TRANSLATED
==========


yet, you should avoid this! Symbols should never start with a point.

Optimization

The Omikron.Assembler masters "semi-" automatic optimizations. If
optimization options are detected during assembly, they are provided with
appropriate alerts (see chapter 5.7.1 on page 100). A button "Customize"
appears above the "Cancel" button. If you click on it, the dialog is
terminated and all rows matched with appropriate alerts. Then you have to
re-assemble again. You may need to repeat this procedure again: a JMP can
be optimized in a pass to a BRA, in a second it can be changed to a Bra.s
(if the jump is not too far, of course).

This procedure may somewhat overcome somebody compared to other assemblers
because they can optimize the same when assembled. However, this is not
possible through our concept. The assembler is practically no slower
through the optimization queries, and the double-assembly in the
Omikron.Assembler probably is still much faster than the binam assembly
with another.

5.5.2 Formula Calculations

The OMIKRON.Assembler allows to work with 16 different arithmetic
operations. These are the basic planes, the Boolean Algebra and
comparisons. All operations are performed with 32-bit accuracy. He
naturally dominates point-dash bill.

Let's Start with the Signs:

    +  |  Plus (who would have thought it)
    -  |  Minus (not bad) (2-complement)
    ~  |  NOT (1-complement)
    !  |  Logical NOT (result is 0 or -1)

