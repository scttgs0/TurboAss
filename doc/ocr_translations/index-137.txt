ORIGINAL
========


führt ein Unterprogramm ab der Adresse aus, Das Unterprogramm sollte
mit einem RTS abgeschlossen sein - es kehrt dann wieder in den Debugger
zurück. Wenn weder Adresse noch Breakpoint angegeben werden, wird ein
Breakpoint hinter den nächsten Befehl gesetzt und der aktuelle ausgeführt.
Normalerweise entspricht DO ohne Adresse/Breakpoint also TRACE ohne
Term, nur wenn der aktuelle Befehl ein JSR oder BSR ist, wird bei DO das
ganze Unterprogramm ausgeführt. Bei JMP, BRA o.ä. ist DO meist nicht
sinnvoll, da der PC wohl nicht so schnell hinter dem JMP (o. ä.) landen wird.

Achtung: CALL ist der einzige Fall, in dem der Debugger unter Umständen
den TRAP # 3 belegt.

Untrace

Syntax : UNTRACE [Adresse] [‚Anzahl]
Kurzform : U

Mit UNTRACE können Sie ein Programm wie mit TRACE durchlaufen lassen;
der Debugger kontrolliert aber nach jedem Befehl, ob eine Abbruchbedingung
erfüllt ist. Diese Bedingungen werden mit IF gesetzt.

Der Programmablauf wird dabei natürlich erheblich verlangsamt, weil pro
Befehl des Programms eine ganze Reihe von Vergleichsbefehlen des Debug-
gers ausgeführt werden müssen.

Außerdem speichert der Debugger die letzten 256 Befehle in einem soge-
nannten Cache. Sie können die Befehle mit den zugehörigen Registerinhalten
nachträglich ansehen. Dazu klicken Sie auf einen der Pfeile, die links neben
der Registeranzeige stehen.

Mit dem Pfeil nach links „blättern“ Sie einen Befehl zurück, das heißt, Sie
sehen den Befehl, der zuletzt ausgeführt wurde sowie die Registerinhalte.
Mit dem Pfeil nach rechts „blättern“ Sie dementsprechend wieder nach vorn.
Mit dem „Fuller“ oben links können Sie zum aktuellen Befehl springen. Mit
der rechten Maustaste können Sie gleich neun Befehle überspringen, also in
Zehnerschritten blättern.



TRANSLATED
==========


If a subroutine runs from the address, the subroutine should be completed with
an RTS - it will then return to the debugger. If neither the address nor
Breakpoint are specified, a breakpoint will be placed behind the next command
and the current one is executed. Usually, without an address/breakpoint, trace
without an term, only if the current command is a JSR or BSR, the entire sub-
program is executed at D0. At JMP, BRA or similar, do it usually does not make
sense, since the PC will probably not end up behind the JMP (or the like) so
quickly.

Attention: CALL is the only case in which the debugger may occupy the trap #3.

Untrace

Syntax : UNTRACE [address] [,number]
Short form : U

With UNTRACE you can let a program go through like with TRACE; However, the
debugger checks after each command whether a termination condition is met.
These conditions are set with IF.

The program process is of course slowly slowed down because a whole range of
comparison commands by the debugger must be carried out per command of the
program.

The debugger also stores the last 256 commands in a so-called cache. You can
then look at the commands with the associated register content. To do this,
click on one of the arrows that are on the left of the register display.

With the arrow to the left, you "leaf out" a command, that is, you see the
command that was last executed and the register content. With the arrow to the
right, it "leaves" back accordingly. With the "Fuller" at the top left you can
jump to the current command. With the right mouse button you can skip nine
commands, i.e. leaf out in ten steps.
