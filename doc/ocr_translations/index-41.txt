ORIGINAL
========


Label sind relozierbare Symbole, welche Adressen darstellen, die evtl. vom
Gemdos beim Laden reloziert werden müssen.

Beispiel:

label: NOP ;Ein Symbol vor einem Opcode

label2: EQU label+100 ;Da label ein Label ist, ist label2
auch eins.

label3: DS.W 10 ;Auch ein Label

aber:

wert3: EQU label2-label ;Zwei Label voneinander subtrahiert
;ergeben eine Konstante

wert4: EQU label2*label ;Das geht NICHT !!!

wert5: EQU label+label2 ;Das geht AUCH NICHT!!!

label3: EQU label+label2-label3 ;Das geht wieder, da
;label2-label3 ein Offset ist,
;welcher zu label addiert werden
;kann!

Noch einige Erklärungen zu Remarks: Bei anderen Assemblern (z.B.
dem Assembler des Entwicklungspaketes) beginnen Remarks stets mit einem
„*“. Da aber der „*“ auch ein Rechenzeichen ist, bricht der Assembler mit
einer Formel ab, wenn er auf ein Space trifft. Allerdings beginnt dann nicht
automatisch ein Remark, sondern der Assembler erwartet vor einem Remark
zwingend entweder ein „;“ oder ein „*“,

Beispiel: move.w #0,wert*2 *2
Ergebnis: move.w #0 ,wert*2 *2

aber: move,w #0,wert*2;2
Ergebnis: move.w #0,wert*2 ;2



TRANSLATED
==========


Label are relocable symbols that represent addresses that may need to be
relocated from the GEMDO at charging.

Example:

label:  NOP             ;A symbol in front of an opcode
label2: EQU label+100   ;Since label is a label, Label2 is one too.
label3: DS.W 10         ;Also a Label

but:

wert3:  EQU label2-label        ;Two labels subtracted from each other
                                ;result in a constant

wert4:  EQU label2*label        ;That will not do !!!

wert5:  EQU label+label2        ;That also does not work!!!

label3: EQU label+label2-label3 ;This goes again because Label2-Label3
                                ;is an offset that can add to label!

Still some explanations of Remarks: For other assemblers (e.g., the
assembler of the development package), Remarks always start with a "*".
But since the "*" is also a compensator, the assembler breaks off with
a formula when applying to a space. However, then does not automatically
start a remark, but the assembler expects either a ";" or a "*" in front
of a remark.

example: move.w #0,value*2 *2
Result:  move.w #0,value*2      *2

but:     move,w #0,value*2;2
Result:  move.w #0,value*2      ;2

