ORIGINAL
========


Im OMIKRON.Assembler brauchen Sie dafür die Stelle im Quellcode nicht
zu suchen: Mit einem Druck auf CONTROL-Help springt der OMIKRON.De-
bugger zurück in den Editor — genau an die Stelle im Quellcode, an der
der PC beim Debuggen gerade stand. Mit CONTROL-SHIFT-HELP springt der
Debugger zurück, ohne die Cursorposition im Editor zu ändern.

Die Marker bleiben erhalten Es werden natürlich alle Marker des As-
semblers übernommen. Wenn Sie in Ihrem Sourcetext mit CONTROL-S einen
Marker auf die Zeile „mainloop: moveq #5,d0“ setzen und dann in den De-
bugger springen, steht in der Variable M5 die Adresse dieser Zeile. Sie können
sich alle Marker mit der Funktionstaste „Marker“ (SHIFT-F6) anzeigen las-
sen. Wenn eine Symboltabelle vorhanden ist, wird neben der Adresse auch
der Symbolname angezeigt, also in unserem Beispiel „mainloop“. Wenn der
Marker nicht in einer Zeile steht, wo ein Label definiert wird, wird ein anderes
Label in Light (heller) angezeigt, das in dem internen Binärbaum daneben
definiert ist. Links von den Adressen sehen Sie Rechtecke, mit denen Sie an
die Adresse „springen“ können: wenn Sie in das Feld des Markers 5 klicken,
wird ab der Zeile „mainloop“ gelistet. Wenn der Marker nicht innerhalb des
Textbereichs liegt, wird nicht gelistet, sondern ein MEMORY/DUMP ange-
zeigt.

Es werden selbstverständlich die Marker auch an Assembler zurücküberge-
geben. Wenn Sie im Debugger mit LET M5=Adresse den Marker auf eine
andere Zeile setzen, rechnet der Assembler aus, auf welcher Zeile der Marker
nun stehen muß.

Beim Wechsel zwischen Debugger und Assembler gehen eventuell gesetzte
Breakpoints im Debugger nicht verloren; wenn Sie nach einer Neuassemblie-
rung wieder in den Debugger springen, sind die Breakpoints noch erhalten.



TRANSLATED
==========


In the OMIKRON.Assembler you don't need to look for the place in the
source code: By pressing CONTROL-Help the OMIKRON.Debugger jumps back to
the editor - exactly to the place in the source code where the PC was just
debugging. With CONTROL-SHIFT-HELP the debugger jumps back without
changing the cursor position in the editor.

The markers are retained of course, all markers of the assembler are
adopted. If you place a marker on the "mainloop: moveq #5,d0" line in your
source text with CONTROL-S and then jump to the debugger, the address of
this line is in the variable M5. You can display all markers with the
"Marker" function key (SHIFT-F6). If a symbol table is available, the
symbol name is also displayed in addition to the address, i.e. "mainloop"
in our example. If the marker is not in a line where a label is defined,
another label is shown in Light, which is defined in the internal binary
tree next to it. To the left of the addresses you see rectangles with
which you can "jump" to the address: if you click in the field of marker
5, "mainloop" is listed from the line. If the marker is not within the
text area, it is not listed, but a MEMORY/DUMP is displayed.

Of course, the markers are also passed back to assembler. If you set the
marker to another line in the debugger with LET M5=address, the assembler
calculates which line the marker must now be on.

When switching between debugger and assembler, any breakpoints set in the
debugger are not lost; if you jump back into the debugger after a
reassembly, the breakpoints are still there.

