ORIGINAL
======== 


Sie können ihn also als Anwendung mit der SRC-Extension
(natürlich auch mit S, ASM usw.) anmelden. Ein Doppelklick auf einen Source-
text lädt dann den Assembler und den Source.

Der Menüpunkt „Zuladen. ..‘“ (SHIFT-F8) erlaubt es Ihnen, in den bereits
im Speicher stehenden Sourcetext weitere ASCII-Sourcetexte einzufügen.
Dazu stellen Sie den Cursor an die Stelle, an die eingefügt werden soll (nur
die Zeile ist entscheidend) und rufen dann diese Funktion auf. Danach werden
wie beim normalen Laden von ASCII-Sourcen die nicht tokenisierbaren Zeilen
gekennzeichnet. Da jedoch jede Zeile einzeln eingefügt werden muß, kann es
beim Zuladen zu ganz erheblichen Wartezeiten kommen, wenn Ihr Sourcetext
schon etwas größer ist. Diese Wartezeit können Sie drastisch verkürzen, wenn
Sie stets ans Sourcetext-Ende zuladen und dann die zugeladenen Zeilen als
Block markieren, um sie an die endgültige Stelle im Sourcetext zu verschie-
ben. Da bei dieser Methode nur angefügt werden muß (und nicht eingefügt),
geht das Laden erheblich schneller. Aber, wie bereits gesagt, lohnt sich dieser
Trick erst bei längeren Sourcetexten.

Unter dem Menüpunkt „Symbole laden...“ können Sie nicht einen kom-
pletten Sourcetext einladen, sondern nur eine Symboltabelle. Eine solche
Symboltabelle besteht nur aus Konstanten-Zuweisungen (siehe Kapitel D.3
auf Seite 192). Bine Symboltabelle können Sie ganz einfach erzeugen, indem
Sie ein Programm assemblieren, welches nur EQU-Befehle enthält (genauge-
nommen nur Befehle, die keinen Code produzieren. Kommentare, OUTPUT-
Befehle usw. sind also auch möglich). Der Assembler meldet dann, daß er
eine Symboltabelle mit n Symbolen erzeugt habe (Siehe Abbildung 5.8 auf
Seite 52). Diese Symboltabelle können Sie dann mit der Extension SYM abspei-
chern und mit dieser Funktion wieder einladen. Diese Symboltabellen haben
den Vorteil, daß Sie sich beim Blättern in Ihrem Listing nicht durch viele Sei-
ten von EQUs wühlen müssen, denn diese Symboltabellen sind nicht sichtbar
(als Beispiele seien die im LIBRARYS .OMI stehenden Dateien SYS_VARS.S und
GEM_VARS.S genannt). Allerdings müssen Sie, um einen Wert zu ändern, den
Sourcetext der Symboltabelle haben, diese neu assemblieren und dann wieder
neu laden. Und das ist auch gleich die zweite Besonderheit der Symboltabel-
len: Sie können eine Symboltabelle beliebig häufig laden, bei jedem Laden
werden die alten Werte eines bereits existierenden Symbols überschrieben.



TRANSLATED
==========


So you can register it as an application with the SRC extension (of course
also with S, ASM, etc.). A double-click on a source text then loads the
assembler and the source.

The menu item “to load... ’“ (Shift-F8) allows you to insert further ASCII
source texts in the source text already in the memory. To do this, place the
cursor to the place where the line is only decisive) and then call this
function. After that, like the normal shop of ASCII sources, the non-
tokenizable lines are marked. However, since each line has to be inserted
individually, there may be considerable waiting times when loading if your
source text is a bit larger. You can drastically shorten this waiting time
if you always load the end of the sourceText and then mark the loaded lines
as a block in order to move them to the final area in the source text.
Since this method only has to be added (and not inserted), the charging is
considerably faster. But as I said, this trick is only worthwhile for longer
source texts.

Under the menu item "Loading symbols ..." you cannot invite a complete source
text, but only a symbol table. Such a symbol table only consists of constant
allocations (see chapter D.3 on page 192). Bine symbol table can easily
create by assembling a program that only contains Equ commands (precisely
only commands that do not produce code. Comments, output commands etc. are
also possible). The assembler then reports that it has created a symbol table
with n symbols (see Figure 5.8 on page 52). You can then save this symbol
table with the SYM extension and invite them again with this function. These
symbol tables have the advantage that you do not have to dig through many
sides of EQUS when leafing in your listing, because these symbol tables are
not visible (the files in the librarys.omi are sys_vars and gem_vars.s).
However, in order to change a value, you have to have the source text of the
symbol table, re-assemble it and then reload them. And that is also the second
special feature of the symbol tables: you can load a symbol table as often as
you like, with each shop the old values ​​of an already existing symbol are
overwritten.

