ORIGINAL
======== 


* Einfache Warnungen (Kann zu Bcc.S optimiert werden)

Eine vollständige Liste aller Fehlermeldungen steht weiter hinten (siehe Ka-
pitel 5.7 auf Seite 100).

Bei fatalen Fehlern wird die Assemblierung sofort abgebrochen, eine Dialog-
box mit der Fehlerursache erscheint, und nach RETURN springt der Editor in
die entsprechende Zeile.

Bei allen anderen Fehlern assembliert der Assembler weiter und markiert alle
fehlerhaften Zeilen. Falls bei der Assemblierung ein (oder mehrere) Fehler auf-
getreten ist/sind, wird (solange der Sourcetext fehlerhaft ist) der Abbruch-
Button default. Es wird bei Auslösen des Abbruch-Buttons dann automa-
tisch zum ersten Fehler gesprungen. Wenn Sie den Dialog jedoch mit der
UNDO- Taste abbrechen, bleibt der Cursor in der aktuellen Zeile. Erwähnens-
wert ist noch, daß der Editor sich alle fehlerhaften Zeilen merkt (und nicht
nur 20 oder 30, wie andere Assembler), und daß z.B. das Duplizieren einer
fehlerhaften Zeile auch die Fehlermarkierung verdoppelt. Sie können auch
einen fehlerhaften Sourcetext abspeichern. Beim späteren Einladen sind alle
Fehler (leider) noch vorhanden. Wenn sich der Cursor auf einer fehlerhaften
Zeile befindet, wird in der Statuszeile dann die entsprechende Fehlermeldung
angezeigt. Um solche fehlerhaften Zeilen einfach finden zu können, brauchen
Sie lediglich ALT-J (Jump to error) drücken, und schon befinden Sie sich in
der nächsten fehlerhaften Zeile. Mit SHIFT-ALT-J können Sie auch aufwärts
suchen lassen. Wenn Sie eine Zeile korrigiert haben, sollten Sie mit CONTROL-J
zum nächsten Fehler springen, dies hat den Vorteil, daß die eben noch als
fehlerhaft gekennzeichnete Zeile aus der Fehlerliste entfernt wird und sie von
ALT-J nicht mehr gefunden wird.

Der zweite Menüpunkt „Assemblieren...“ (F1 oder CONTROL-A) assemb-
liert den Sourcecode, gibt aber im Gegensatz zu „Assemblieren“ eine Dia-
logbox aus (Siehe Abbildung 5.14 auf Seite 57), in der Sie zwei Dinge tun
können:

1. Sie können Ihr Programm mit einer Symboltabelle versehen, d.h., alle
im Sourcetext benutzten Label werden an das fertige Programm an-
gehängt. Eine Symboltabelle erlaubt eine wesentlich bessere Orientie-
rung im Programm, wenn Sie es mit dem Debugger auf Fehler testen,
da statt Adressen eben Symbole angezeigt werden. Eine Symboltabelle



TRANSLATED
==========


* Simple warnings (can be optimized to Bcc.S)

A complete list of all error messages is further back (see chapter 5.7 on
page 100).

In the event of fatal errors, the assembly is canceled immediately, a
dialog box with the cause of the error appears, and after Return the editor
jumps into the corresponding line.

For all other errors, the assembler continues assembling and marks all
incorrect lines. If one (or more) errors occurred during assembly, the
abort button will be the default (as long as the source text is incorrect).
When the cancel button is clicked, the system automatically jumps to the
first error. However, if you cancel the dialog with the UNDO key, the
cursor remains on the current line. It's also worth mentioning that the
editor remembers all erroneous lines (and not just 20 or 30 like other
assemblers), and that e.g. duplicating an erroneous line also doubles the
error marking. You can also save an incorrect source text. When loading
later, all errors (unfortunately) are still present. If the cursor is on
an incorrect line, the corresponding error message is then displayed in the
status line. To easily find such erroneous lines, all you have to do is
press ALT-J (Jump to error) and you'll find yourself on the next erroneous
line. You can also search upwards with SHIFT-ALT-J. If you have corrected a
line, you should use CONTROL-J to jump to the next error. This has the
advantage that the line just marked as incorrect is removed from the error
list and ALT-J can no longer find it.

The second menu item "Assemble ..." (F1 or Control-A) assembles the source
code, but in contrast to "assemble" a dialog box (see Figure 5.14 on page
57), in which you can do two things:

1. You can provide your program with a symbol table, i.e. all the labels
used in the source text are attached to the finished program. A symbolic
table allows a much better orientation in the program if you test it for
errors with the debugger, as symbols are displayed instead of addresses.

