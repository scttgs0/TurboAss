ORIGINAL
======== 


Erst nachdem die I/O-Routinen in den Assembler eingebaut waren (und funk-
tionierten (stöhn)), gingen wir dazu über, die eigentliche Assemblierung zu
schreiben. Unser Ziel war es, eine Geschwindigkeit von ca. 250000 Zeilen pro
Minute zu schaffen. Wie sich allerdings herausstellte, waren diese Schätzun-
gen „etwas“ zu niedrig, der Assembler schaffte ca. 2000000 Zeilen pro Mi-
nute. Die Geschwindigkeit wurde durch nötige Abfragen (Reicht der Spei-
cherplatz noch?) zwar noch etwas geringer, aber sie blieb doch hinreichend
hoch.

Zu diesem Zeitpunkt verpaßte Artur Södler (seines Zeichens Programmie-
rer von OMIKRON.BASIC) unserem Assembler neue Zeichenausgaberouti-
nen, welche die Geschwindigkeit von 3 Seiten pro Sekunde auf über 10 beim
seitenweisen Blättern brachte. Damit war die Darstellung des Assemblers
ausreichend schnell, fehlte nur noch ein vernünftiger Editor (Block-Befehle,
Suchen und Ersetzen, ...). Während Sören den Rest des Jahres mit solchen
„Kleinigkeiten“ verbrachte, versuchte ich, den Debugger zu verbessern, in-
dem ich fast alle Funktionen implementierte, die mir vorgeschlagen wurden.
Besonders lange haben Sören und ich jedoch an der Benutzeroberfläche ge-
feilt; damit alle Funktionen, die häufig gebraucht werden einfach aufgerufen
werden können. Das fängt mit Symbolsuche an und hört damit auf, daß man
seine Einstellungen abspeichern kann. Dann haben wir nochmals alles auf
Geschwindigkeit optimiert.

Weil wir bei der Eingabe bereits assemblieren, kam uns die Idee, daß es doch
möglich sein müßte, den PC des Debuggers in eine Zeilennummer zurück-
zurechnen. Gesagt, getan, Sören machte das Unmögliche möglich und im-
plementierte eine Umrechnung von PC in Zeilennummer und umgekehrt. Er
setzte dem ganzen noch die Krone auf, als er auf die Idee kam, die Marker
auch noch umzurechnen. Etwa 8 Stunden später (es muß so 5 Uhr Samstag-
morgen gewesen sein) war die Schnittstelle fertig (sie wurde im Laufe der Zeit
allerdings mehrfach erweitert und überarbeitet). Die Möglichkeit, auf einen
Tastendruck ein Programm zu assemblieren, das Programm dem Debugger
zu übergeben und zu starten, ist wohl einmalig und war vorher höchstens
bei Interpretern vorhanden. Der Rücksprung in den Assembler geschieht bei
Programmende automatisch oder bei Programmabbruch mit SHIFT-SHIFT
an die entsprechende Stelle (Option ist ausschaltbar) — und das ohne nen-
nenswerte Verzögerung.

So kommen wir also zur neuesten Version des Assemblers, welche seit neue-



TRANSLATED
==========


Only after the I / O routines were installed in the assembler (and worked
(stood)), we went to write the actual assembly. Our goal was to create a
speed of about 250,000 lines per minute. As it turned out, these estimates
were "something" too low, the assembler managed about 2,000,000 lines per
minute. The speed was passed through necessary queries (is the space still
enough?) Although a little lower, but she remained sufficiently high.

At this time, Artur Missed Södler (His Character Programmer of Omikron.basic)
Our Assembler new character outlookouts, which brought the speed of 3 pages
per second to over 10 in side-by-side leaves. Thus, the representation of
the assembler was sufficiently fast, missing only a reasonable editor (block
commands, search and replace, ...). While Sören spent the rest of the year
with such "little things", I tried to improve the debugger by implementing
almost all functions suggested to me. Especially long have sear and I waved
on the user interface; So that all functions that are often used can be
easily accessed. It starts with symbol search and it stops that you can save
his settings. Then we have once again optimized everything at speed.

Because we already assemble in the input, the idea came to us that it would
have to be possible to recalculate the PC of the debugger into a line number.
Said, done, sear made the impossible possible and implemented a translation
of PC in line number and vice versa. He sat down the crown as he came up with
the idea of recurring the markers. About 8 hours later (it must have been
5 o'clock on Saturday morning) the interface was done (but it has been
extended and revised several times over time). The possibility to assemble a
program to a touch of a button, to pass and start the program to the debugger
is probably unique and was previously at most at interpreters. The return in
the assembler is done automatically at program ends automatically or when
terminating with Shift Shift to the corresponding location (option is
switchable) - and without significant delay.

So we come to the latest version of the assembler, which has finally included

